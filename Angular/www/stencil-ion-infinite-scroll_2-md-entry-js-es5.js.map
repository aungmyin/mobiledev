{"version":3,"sources":["stencil-ion-infinite-scroll_2-md-entry-js-es5.js","webpack:///node_modules/@ionic/core/dist/esm/ion-infinite-scroll_2-md.entry.js"],"names":[],"mappings":"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","file":"x","sourcesContent":["(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[\"stencil-ion-infinite-scroll_2-md-entry-js\"],{\n\n/***/ \"./node_modules/@ionic/core/dist/esm/ion-infinite-scroll_2-md.entry.js\":\n/*!*****************************************************************************!*\\\n  !*** ./node_modules/@ionic/core/dist/esm/ion-infinite-scroll_2-md.entry.js ***!\n  \\*****************************************************************************/\n/*! exports provided: ion_infinite_scroll, ion_infinite_scroll_content */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ion_infinite_scroll\", function() { return InfiniteScroll; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ion_infinite_scroll_content\", function() { return InfiniteScrollContent; });\n/* harmony import */ var _index_2cd7e630_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-2cd7e630.js */ \"./node_modules/@ionic/core/dist/esm/index-2cd7e630.js\");\n/* harmony import */ var _ionic_global_a175fa73_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ionic-global-a175fa73.js */ \"./node_modules/@ionic/core/dist/esm/ionic-global-a175fa73.js\");\n/* harmony import */ var _index_729ec402_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-729ec402.js */ \"./node_modules/@ionic/core/dist/esm/index-729ec402.js\");\n\r\n\r\n\r\n\r\nconst infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\r\n\r\nconst InfiniteScroll = class {\r\n    constructor(hostRef) {\r\n        Object(_index_2cd7e630_js__WEBPACK_IMPORTED_MODULE_0__[\"r\"])(this, hostRef);\r\n        this.thrPx = 0;\r\n        this.thrPc = 0;\r\n        this.didFire = false;\r\n        this.isBusy = false;\r\n        this.isLoading = false;\r\n        /**\r\n         * The threshold distance from the bottom\r\n         * of the content to call the `infinite` output event when scrolled.\r\n         * The threshold value can be either a percent, or\r\n         * in pixels. For example, use the value of `10%` for the `infinite`\r\n         * output event to get called when the user has scrolled 10%\r\n         * from the bottom of the page. Use the value `100px` when the\r\n         * scroll is within 100 pixels from the bottom of the page.\r\n         */\r\n        this.threshold = '15%';\r\n        /**\r\n         * If `true`, the infinite scroll will be hidden and scroll event listeners\r\n         * will be removed.\r\n         *\r\n         * Set this to true to disable the infinite scroll from actively\r\n         * trying to receive new data while scrolling. This is useful\r\n         * when it is known that there is no more data that can be added, and\r\n         * the infinite scroll is no longer needed.\r\n         */\r\n        this.disabled = false;\r\n        /**\r\n         * The position of the infinite scroll element.\r\n         * The value can be either `top` or `bottom`.\r\n         */\r\n        this.position = 'bottom';\r\n        this.onScroll = () => {\r\n            const scrollEl = this.scrollEl;\r\n            if (!scrollEl || !this.canStart()) {\r\n                return 1;\r\n            }\r\n            const infiniteHeight = this.el.offsetHeight;\r\n            if (infiniteHeight === 0) {\r\n                // if there is no height of this element then do nothing\r\n                return 2;\r\n            }\r\n            const scrollTop = scrollEl.scrollTop;\r\n            const scrollHeight = scrollEl.scrollHeight;\r\n            const height = scrollEl.offsetHeight;\r\n            const threshold = this.thrPc !== 0 ? (height * this.thrPc) : this.thrPx;\r\n            const distanceFromInfinite = (this.position === 'bottom')\r\n                ? scrollHeight - infiniteHeight - scrollTop - threshold - height\r\n                : scrollTop - infiniteHeight - threshold;\r\n            if (distanceFromInfinite < 0) {\r\n                if (!this.didFire) {\r\n                    this.isLoading = true;\r\n                    this.didFire = true;\r\n                    this.ionInfinite.emit();\r\n                    return 3;\r\n                }\r\n            }\r\n            else {\r\n                this.didFire = false;\r\n            }\r\n            return 4;\r\n        };\r\n        this.ionInfinite = Object(_index_2cd7e630_js__WEBPACK_IMPORTED_MODULE_0__[\"d\"])(this, \"ionInfinite\", 7);\r\n    }\r\n    thresholdChanged() {\r\n        const val = this.threshold;\r\n        if (val.lastIndexOf('%') > -1) {\r\n            this.thrPx = 0;\r\n            this.thrPc = (parseFloat(val) / 100);\r\n        }\r\n        else {\r\n            this.thrPx = parseFloat(val);\r\n            this.thrPc = 0;\r\n        }\r\n    }\r\n    disabledChanged() {\r\n        const disabled = this.disabled;\r\n        if (disabled) {\r\n            this.isLoading = false;\r\n            this.isBusy = false;\r\n        }\r\n        this.enableScrollEvents(!disabled);\r\n    }\r\n    async connectedCallback() {\r\n        const contentEl = this.el.closest('ion-content');\r\n        if (!contentEl) {\r\n            console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\r\n            return;\r\n        }\r\n        this.scrollEl = await contentEl.getScrollElement();\r\n        this.thresholdChanged();\r\n        this.disabledChanged();\r\n        if (this.position === 'top') {\r\n            Object(_index_2cd7e630_js__WEBPACK_IMPORTED_MODULE_0__[\"w\"])(() => {\r\n                if (this.scrollEl) {\r\n                    this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    disconnectedCallback() {\r\n        this.enableScrollEvents(false);\r\n        this.scrollEl = undefined;\r\n    }\r\n    /**\r\n     * Call `complete()` within the `ionInfinite` output event handler when\r\n     * your async operation has completed. For example, the `loading`\r\n     * state is while the app is performing an asynchronous operation,\r\n     * such as receiving more data from an AJAX request to add more items\r\n     * to a data list. Once the data has been received and UI updated, you\r\n     * then call this method to signify that the loading has completed.\r\n     * This method will change the infinite scroll's state from `loading`\r\n     * to `enabled`.\r\n     */\r\n    async complete() {\r\n        const scrollEl = this.scrollEl;\r\n        if (!this.isLoading || !scrollEl) {\r\n            return;\r\n        }\r\n        this.isLoading = false;\r\n        if (this.position === 'top') {\r\n            /**\r\n             * New content is being added at the top, but the scrollTop position stays the same,\r\n             * which causes a scroll jump visually. This algorithm makes sure to prevent this.\r\n             * (Frame 1)\r\n             *    - complete() is called, but the UI hasn't had time to update yet.\r\n             *    - Save the current content dimensions.\r\n             *    - Wait for the next frame using _dom.read, so the UI will be updated.\r\n             * (Frame 2)\r\n             *    - Read the new content dimensions.\r\n             *    - Calculate the height difference and the new scroll position.\r\n             *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\r\n             * (Still frame 2, if I'm correct)\r\n             *    - Change the scroll position (= visually maintain the scroll position).\r\n             *    - Change the state to re-enable the InfiniteScroll.\r\n             *    - This should be after changing the scroll position, or it could\r\n             *    cause the InfiniteScroll to be triggered again immediately.\r\n             * (Frame 3)\r\n             *    Done.\r\n             */\r\n            this.isBusy = true;\r\n            // ******** DOM READ ****************\r\n            // Save the current content dimensions before the UI updates\r\n            const prev = scrollEl.scrollHeight - scrollEl.scrollTop;\r\n            // ******** DOM READ ****************\r\n            requestAnimationFrame(() => {\r\n                Object(_index_2cd7e630_js__WEBPACK_IMPORTED_MODULE_0__[\"f\"])(() => {\r\n                    // UI has updated, save the new content dimensions\r\n                    const scrollHeight = scrollEl.scrollHeight;\r\n                    // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\r\n                    const newScrollTop = scrollHeight - prev;\r\n                    // ******** DOM WRITE ****************\r\n                    requestAnimationFrame(() => {\r\n                        Object(_index_2cd7e630_js__WEBPACK_IMPORTED_MODULE_0__[\"w\"])(() => {\r\n                            scrollEl.scrollTop = newScrollTop;\r\n                            this.isBusy = false;\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        }\r\n    }\r\n    canStart() {\r\n        return (!this.disabled &&\r\n            !this.isBusy &&\r\n            !!this.scrollEl &&\r\n            !this.isLoading);\r\n    }\r\n    enableScrollEvents(shouldListen) {\r\n        if (this.scrollEl) {\r\n            if (shouldListen) {\r\n                this.scrollEl.addEventListener('scroll', this.onScroll);\r\n            }\r\n            else {\r\n                this.scrollEl.removeEventListener('scroll', this.onScroll);\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        const mode = Object(_ionic_global_a175fa73_js__WEBPACK_IMPORTED_MODULE_1__[\"b\"])(this);\r\n        const disabled = this.disabled;\r\n        return (Object(_index_2cd7e630_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(_index_2cd7e630_js__WEBPACK_IMPORTED_MODULE_0__[\"H\"], { class: {\r\n                [mode]: true,\r\n                'infinite-scroll-loading': this.isLoading,\r\n                'infinite-scroll-enabled': !disabled\r\n            } }));\r\n    }\r\n    get el() { return Object(_index_2cd7e630_js__WEBPACK_IMPORTED_MODULE_0__[\"e\"])(this); }\r\n    static get watchers() { return {\r\n        \"threshold\": [\"thresholdChanged\"],\r\n        \"disabled\": [\"disabledChanged\"]\r\n    }; }\r\n};\r\nInfiniteScroll.style = infiniteScrollCss;\r\n\r\nconst infiniteScrollContentIosCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\r\n\r\nconst infiniteScrollContentMdCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\r\n\r\nconst InfiniteScrollContent = class {\r\n    constructor(hostRef) {\r\n        Object(_index_2cd7e630_js__WEBPACK_IMPORTED_MODULE_0__[\"r\"])(this, hostRef);\r\n    }\r\n    componentDidLoad() {\r\n        if (this.loadingSpinner === undefined) {\r\n            const mode = Object(_ionic_global_a175fa73_js__WEBPACK_IMPORTED_MODULE_1__[\"b\"])(this);\r\n            this.loadingSpinner = _ionic_global_a175fa73_js__WEBPACK_IMPORTED_MODULE_1__[\"c\"].get('infiniteLoadingSpinner', _ionic_global_a175fa73_js__WEBPACK_IMPORTED_MODULE_1__[\"c\"].get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\r\n        }\r\n    }\r\n    render() {\r\n        const mode = Object(_ionic_global_a175fa73_js__WEBPACK_IMPORTED_MODULE_1__[\"b\"])(this);\r\n        return (Object(_index_2cd7e630_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(_index_2cd7e630_js__WEBPACK_IMPORTED_MODULE_0__[\"H\"], { class: {\r\n                [mode]: true,\r\n                // Used internally for styling\r\n                [`infinite-scroll-content-${mode}`]: true\r\n            } }, Object(_index_2cd7e630_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"div\", { class: \"infinite-loading\" }, this.loadingSpinner && (Object(_index_2cd7e630_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"div\", { class: \"infinite-loading-spinner\" }, Object(_index_2cd7e630_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"ion-spinner\", { name: this.loadingSpinner }))), this.loadingText && (Object(_index_2cd7e630_js__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(\"div\", { class: \"infinite-loading-text\", innerHTML: Object(_index_729ec402_js__WEBPACK_IMPORTED_MODULE_2__[\"s\"])(this.loadingText) })))));\r\n    }\r\n};\r\nInfiniteScrollContent.style = {\r\n    /*STENCIL:MODE:ios*/ ios: infiniteScrollContentIosCss,\r\n    /*STENCIL:MODE:md*/ md: infiniteScrollContentMdCss\r\n};\r\n\r\n\r\n\n\n/***/ })\n\n}]);\n//# sourceMappingURL=stencil-ion-infinite-scroll_2-md-entry-js-es2015.js.map","import { r as registerInstance, d as createEvent, w as writeTask, f as readTask, h, e as getElement, H as Host } from './index-2cd7e630.js';\r\nimport { b as getIonMode, c as config } from './ionic-global-a175fa73.js';\r\nimport { s as sanitizeDOMString } from './index-729ec402.js';\r\n\r\nconst infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\r\n\r\nconst InfiniteScroll = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.thrPx = 0;\r\n        this.thrPc = 0;\r\n        this.didFire = false;\r\n        this.isBusy = false;\r\n        this.isLoading = false;\r\n        /**\r\n         * The threshold distance from the bottom\r\n         * of the content to call the `infinite` output event when scrolled.\r\n         * The threshold value can be either a percent, or\r\n         * in pixels. For example, use the value of `10%` for the `infinite`\r\n         * output event to get called when the user has scrolled 10%\r\n         * from the bottom of the page. Use the value `100px` when the\r\n         * scroll is within 100 pixels from the bottom of the page.\r\n         */\r\n        this.threshold = '15%';\r\n        /**\r\n         * If `true`, the infinite scroll will be hidden and scroll event listeners\r\n         * will be removed.\r\n         *\r\n         * Set this to true to disable the infinite scroll from actively\r\n         * trying to receive new data while scrolling. This is useful\r\n         * when it is known that there is no more data that can be added, and\r\n         * the infinite scroll is no longer needed.\r\n         */\r\n        this.disabled = false;\r\n        /**\r\n         * The position of the infinite scroll element.\r\n         * The value can be either `top` or `bottom`.\r\n         */\r\n        this.position = 'bottom';\r\n        this.onScroll = () => {\r\n            const scrollEl = this.scrollEl;\r\n            if (!scrollEl || !this.canStart()) {\r\n                return 1;\r\n            }\r\n            const infiniteHeight = this.el.offsetHeight;\r\n            if (infiniteHeight === 0) {\r\n                // if there is no height of this element then do nothing\r\n                return 2;\r\n            }\r\n            const scrollTop = scrollEl.scrollTop;\r\n            const scrollHeight = scrollEl.scrollHeight;\r\n            const height = scrollEl.offsetHeight;\r\n            const threshold = this.thrPc !== 0 ? (height * this.thrPc) : this.thrPx;\r\n            const distanceFromInfinite = (this.position === 'bottom')\r\n                ? scrollHeight - infiniteHeight - scrollTop - threshold - height\r\n                : scrollTop - infiniteHeight - threshold;\r\n            if (distanceFromInfinite < 0) {\r\n                if (!this.didFire) {\r\n                    this.isLoading = true;\r\n                    this.didFire = true;\r\n                    this.ionInfinite.emit();\r\n                    return 3;\r\n                }\r\n            }\r\n            else {\r\n                this.didFire = false;\r\n            }\r\n            return 4;\r\n        };\r\n        this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\r\n    }\r\n    thresholdChanged() {\r\n        const val = this.threshold;\r\n        if (val.lastIndexOf('%') > -1) {\r\n            this.thrPx = 0;\r\n            this.thrPc = (parseFloat(val) / 100);\r\n        }\r\n        else {\r\n            this.thrPx = parseFloat(val);\r\n            this.thrPc = 0;\r\n        }\r\n    }\r\n    disabledChanged() {\r\n        const disabled = this.disabled;\r\n        if (disabled) {\r\n            this.isLoading = false;\r\n            this.isBusy = false;\r\n        }\r\n        this.enableScrollEvents(!disabled);\r\n    }\r\n    async connectedCallback() {\r\n        const contentEl = this.el.closest('ion-content');\r\n        if (!contentEl) {\r\n            console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\r\n            return;\r\n        }\r\n        this.scrollEl = await contentEl.getScrollElement();\r\n        this.thresholdChanged();\r\n        this.disabledChanged();\r\n        if (this.position === 'top') {\r\n            writeTask(() => {\r\n                if (this.scrollEl) {\r\n                    this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    disconnectedCallback() {\r\n        this.enableScrollEvents(false);\r\n        this.scrollEl = undefined;\r\n    }\r\n    /**\r\n     * Call `complete()` within the `ionInfinite` output event handler when\r\n     * your async operation has completed. For example, the `loading`\r\n     * state is while the app is performing an asynchronous operation,\r\n     * such as receiving more data from an AJAX request to add more items\r\n     * to a data list. Once the data has been received and UI updated, you\r\n     * then call this method to signify that the loading has completed.\r\n     * This method will change the infinite scroll's state from `loading`\r\n     * to `enabled`.\r\n     */\r\n    async complete() {\r\n        const scrollEl = this.scrollEl;\r\n        if (!this.isLoading || !scrollEl) {\r\n            return;\r\n        }\r\n        this.isLoading = false;\r\n        if (this.position === 'top') {\r\n            /**\r\n             * New content is being added at the top, but the scrollTop position stays the same,\r\n             * which causes a scroll jump visually. This algorithm makes sure to prevent this.\r\n             * (Frame 1)\r\n             *    - complete() is called, but the UI hasn't had time to update yet.\r\n             *    - Save the current content dimensions.\r\n             *    - Wait for the next frame using _dom.read, so the UI will be updated.\r\n             * (Frame 2)\r\n             *    - Read the new content dimensions.\r\n             *    - Calculate the height difference and the new scroll position.\r\n             *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\r\n             * (Still frame 2, if I'm correct)\r\n             *    - Change the scroll position (= visually maintain the scroll position).\r\n             *    - Change the state to re-enable the InfiniteScroll.\r\n             *    - This should be after changing the scroll position, or it could\r\n             *    cause the InfiniteScroll to be triggered again immediately.\r\n             * (Frame 3)\r\n             *    Done.\r\n             */\r\n            this.isBusy = true;\r\n            // ******** DOM READ ****************\r\n            // Save the current content dimensions before the UI updates\r\n            const prev = scrollEl.scrollHeight - scrollEl.scrollTop;\r\n            // ******** DOM READ ****************\r\n            requestAnimationFrame(() => {\r\n                readTask(() => {\r\n                    // UI has updated, save the new content dimensions\r\n                    const scrollHeight = scrollEl.scrollHeight;\r\n                    // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\r\n                    const newScrollTop = scrollHeight - prev;\r\n                    // ******** DOM WRITE ****************\r\n                    requestAnimationFrame(() => {\r\n                        writeTask(() => {\r\n                            scrollEl.scrollTop = newScrollTop;\r\n                            this.isBusy = false;\r\n                        });\r\n                    });\r\n                });\r\n            });\r\n        }\r\n    }\r\n    canStart() {\r\n        return (!this.disabled &&\r\n            !this.isBusy &&\r\n            !!this.scrollEl &&\r\n            !this.isLoading);\r\n    }\r\n    enableScrollEvents(shouldListen) {\r\n        if (this.scrollEl) {\r\n            if (shouldListen) {\r\n                this.scrollEl.addEventListener('scroll', this.onScroll);\r\n            }\r\n            else {\r\n                this.scrollEl.removeEventListener('scroll', this.onScroll);\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        const mode = getIonMode(this);\r\n        const disabled = this.disabled;\r\n        return (h(Host, { class: {\r\n                [mode]: true,\r\n                'infinite-scroll-loading': this.isLoading,\r\n                'infinite-scroll-enabled': !disabled\r\n            } }));\r\n    }\r\n    get el() { return getElement(this); }\r\n    static get watchers() { return {\r\n        \"threshold\": [\"thresholdChanged\"],\r\n        \"disabled\": [\"disabledChanged\"]\r\n    }; }\r\n};\r\nInfiniteScroll.style = infiniteScrollCss;\r\n\r\nconst infiniteScrollContentIosCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\r\n\r\nconst infiniteScrollContentMdCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\r\n\r\nconst InfiniteScrollContent = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n    }\r\n    componentDidLoad() {\r\n        if (this.loadingSpinner === undefined) {\r\n            const mode = getIonMode(this);\r\n            this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\r\n        }\r\n    }\r\n    render() {\r\n        const mode = getIonMode(this);\r\n        return (h(Host, { class: {\r\n                [mode]: true,\r\n                // Used internally for styling\r\n                [`infinite-scroll-content-${mode}`]: true\r\n            } }, h(\"div\", { class: \"infinite-loading\" }, this.loadingSpinner && (h(\"div\", { class: \"infinite-loading-spinner\" }, h(\"ion-spinner\", { name: this.loadingSpinner }))), this.loadingText && (h(\"div\", { class: \"infinite-loading-text\", innerHTML: sanitizeDOMString(this.loadingText) })))));\r\n    }\r\n};\r\nInfiniteScrollContent.style = {\r\n    /*STENCIL:MODE:ios*/ ios: infiniteScrollContentIosCss,\r\n    /*STENCIL:MODE:md*/ md: infiniteScrollContentMdCss\r\n};\r\n\r\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };\r\n"]}